
// Tests ways that we can mark things as having failed

// import expect.js
let expect = require( 'expect.js' )

// import all relevant classes
const { LC, Statement, Environment } = require( '../classes/all.js' )

suite( 'Failures', () => {

  test( 'If we don\'t mark quantifiers w/failures, they bind stuff', () => {
    let stmt = LC.fromString( '~forall(x,y,P(x,y))' )
    expect( stmt.successfullyBinds( 'x' ) ).to.be( true )
    expect( stmt.successfullyBinds( 'y' ) ).to.be( true )
    expect( stmt.successfullyBinds( 'z' ) ).to.be( false )
    expect( stmt.successfullyBinds( 'P' ) ).to.be( false )
    expect( stmt.successfullyBinds( 'forall' ) ).to.be( false )
    expect( stmt.successfullyBinds( '~forall' ) ).to.be( false )
    stmt = LC.fromString( '~forall(x,~exists(y,P(x,y)))' )
    expect( stmt.successfullyBinds( 'x' ) ).to.be( true )
    expect( stmt.successfullyBinds( 'y' ) ).to.be( false )
    expect( stmt.successfullyBinds( 'z' ) ).to.be( false )
    expect( stmt.successfullyBinds( 'P' ) ).to.be( false )
    expect( stmt.successfullyBinds( 'forall' ) ).to.be( false )
    expect( stmt.successfullyBinds( '~forall' ) ).to.be( false )
    expect( stmt.successfullyBinds( 'exists' ) ).to.be( false )
    expect( stmt.successfullyBinds( '~exists' ) ).to.be( false )
  } )

  test( 'Quantifiers marked with no failures behave the same', () => {
    let stmt = LC.fromString( '~forall(x,y,P(x,y))' )
    stmt.markFailures( [ ] )
    expect( stmt.getAttribute( 'binding failures' ) ).to.be.ok()
    expect( stmt.successfullyBinds( 'x' ) ).to.be( true )
    expect( stmt.successfullyBinds( 'y' ) ).to.be( true )
    expect( stmt.successfullyBinds( 'z' ) ).to.be( false )
    expect( stmt.successfullyBinds( 'P' ) ).to.be( false )
    expect( stmt.successfullyBinds( 'forall' ) ).to.be( false )
    expect( stmt.successfullyBinds( '~forall' ) ).to.be( false )
    stmt = LC.fromString( '~forall(x,~exists(y,P(x,y)))' )
    stmt.markFailures( [ ] )
    expect( stmt.getAttribute( 'binding failures' ) ).to.be.ok()
    expect( stmt.successfullyBinds( 'x' ) ).to.be( true )
    expect( stmt.successfullyBinds( 'y' ) ).to.be( false )
    expect( stmt.successfullyBinds( 'z' ) ).to.be( false )
    expect( stmt.successfullyBinds( 'P' ) ).to.be( false )
    expect( stmt.successfullyBinds( 'forall' ) ).to.be( false )
    expect( stmt.successfullyBinds( '~forall' ) ).to.be( false )
    expect( stmt.successfullyBinds( 'exists' ) ).to.be( false )
    expect( stmt.successfullyBinds( '~exists' ) ).to.be( false )
  } )

  test( 'Quantifiers marked with failures don\'t bind that stuff', () => {
    let stmt = LC.fromString( '~forall(x,y,P(x,y))' )
    stmt.markFailures( [ 'x' ] )
    expect( stmt.getAttribute( 'binding failures' ) ).to.eql( [ 'x' ] )
    expect( stmt.successfullyBinds( 'x' ) ).to.be( false )
    expect( stmt.successfullyBinds( 'y' ) ).to.be( true )
    stmt.markFailures( [ 'y' ] )
    expect( stmt.getAttribute( 'binding failures' ) ).to.eql( [ 'y' ] )
    expect( stmt.successfullyBinds( 'x' ) ).to.be( true )
    expect( stmt.successfullyBinds( 'y' ) ).to.be( false )
    stmt.markFailures( [ 'x', 'y' ] )
    expect( stmt.getAttribute( 'binding failures' ) ).to.eql( [ 'x', 'y' ] )
    expect( stmt.successfullyBinds( 'x' ) ).to.be( false )
    expect( stmt.successfullyBinds( 'y' ) ).to.be( false )
    stmt.markFailures( [ ] )
    expect( stmt.getAttribute( 'binding failures' ) ).to.eql( [ ] )
    expect( stmt.successfullyBinds( 'x' ) ).to.be( true )
    expect( stmt.successfullyBinds( 'y' ) ).to.be( true )
    stmt = LC.fromString( '~forall(x,~exists(y,P(x,y)))' )
    stmt.markFailures( [ 'x' ] )
    expect( stmt.getAttribute( 'binding failures' ) ).to.eql( [ 'x' ] )
    expect( stmt.successfullyBinds( 'x' ) ).to.be( false )
    expect( stmt.successfullyBinds( 'y' ) ).to.be( false )
    stmt.markFailures( [ 'y' ] )
    expect( stmt.getAttribute( 'binding failures' ) ).to.eql( [ 'y' ] )
    expect( stmt.successfullyBinds( 'x' ) ).to.be( true )
    expect( stmt.successfullyBinds( 'y' ) ).to.be( false )
    stmt.markFailures( [ 'x', 'y' ] )
    expect( stmt.getAttribute( 'binding failures' ) ).to.eql( [ 'x', 'y' ] )
    expect( stmt.successfullyBinds( 'x' ) ).to.be( false )
    expect( stmt.successfullyBinds( 'y' ) ).to.be( false )
    stmt.markFailures( [ ] )
    expect( stmt.getAttribute( 'binding failures' ) ).to.eql( [ ] )
    expect( stmt.successfullyBinds( 'x' ) ).to.be( true )
    expect( stmt.successfullyBinds( 'y' ) ).to.be( false )
    let inner = stmt.children()[1]
    expect( inner.isAQuantifier ).to.be( true )
    inner.markFailures( [ 'x' ] )
    expect( inner.getAttribute( 'binding failures' ) ).to.eql( [ 'x' ] )
    expect( inner.successfullyBinds( 'x' ) ).to.be( false )
    expect( inner.successfullyBinds( 'y' ) ).to.be( true )
    inner.markFailures( [ 'y' ] )
    expect( inner.getAttribute( 'binding failures' ) ).to.eql( [ 'y' ] )
    expect( inner.successfullyBinds( 'x' ) ).to.be( false )
    expect( inner.successfullyBinds( 'y' ) ).to.be( false )
    inner.markFailures( [ 'x', 'y' ] )
    expect( inner.getAttribute( 'binding failures' ) ).to.eql( [ 'x', 'y' ] )
    expect( inner.successfullyBinds( 'x' ) ).to.be( false )
    expect( inner.successfullyBinds( 'y' ) ).to.be( false )
    inner.markFailures( [ ] )
    expect( inner.getAttribute( 'binding failures' ) ).to.eql( [ ] )
    expect( inner.successfullyBinds( 'x' ) ).to.be( false )
    expect( inner.successfullyBinds( 'y' ) ).to.be( true )
  } )

} )
